ParseOk (Module (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 1, srcSpanEndLine = 17, srcSpanEndColumn = 1}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 1, srcSpanEndLine = 1, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 1, srcSpanEndLine = 1, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 1, srcSpanEndLine = 1, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 2, srcSpanStartColumn = 1, srcSpanEndLine = 2, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 3, srcSpanStartColumn = 1, srcSpanEndLine = 3, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 1, srcSpanEndLine = 5, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 13, srcSpanStartColumn = 1, srcSpanEndLine = 13, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 17, srcSpanStartColumn = 1, srcSpanEndLine = 17, srcSpanEndColumn = 1},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 17, srcSpanStartColumn = 1, srcSpanEndLine = 17, srcSpanEndColumn = 1}]}) Nothing [] [ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 1, srcSpanEndLine = 1, srcSpanEndColumn = 59}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 1, srcSpanEndLine = 1, srcSpanEndColumn = 7},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 8, srcSpanEndLine = 1, srcSpanEndColumn = 17},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 50, srcSpanEndLine = 1, srcSpanEndColumn = 52}]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 18, srcSpanEndLine = 1, srcSpanEndColumn = 49}, srcInfoPoints = []}) "Language.Haskell.Exts.Annotated", importQualified = True, importSrc = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 1, srcSpanStartColumn = 53, srcSpanEndLine = 1, srcSpanEndColumn = 59}, srcInfoPoints = []}) "Parser"), importSpecs = Nothing},ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 2, srcSpanStartColumn = 1, srcSpanEndLine = 2, srcSpanEndColumn = 63}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 2, srcSpanStartColumn = 1, srcSpanEndLine = 2, srcSpanEndColumn = 7},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 2, srcSpanStartColumn = 8, srcSpanEndLine = 2, srcSpanEndColumn = 17},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 2, srcSpanStartColumn = 57, srcSpanEndLine = 2, srcSpanEndColumn = 59}]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 2, srcSpanStartColumn = 18, srcSpanEndLine = 2, srcSpanEndColumn = 56}, srcInfoPoints = []}) "Language.Haskell.Exts.Annotated.Syntax", importQualified = True, importSrc = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 2, srcSpanStartColumn = 60, srcSpanEndLine = 2, srcSpanEndColumn = 63}, srcInfoPoints = []}) "Syn"), importSpecs = Nothing},ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 3, srcSpanStartColumn = 1, srcSpanEndLine = 3, srcSpanEndColumn = 56}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 3, srcSpanStartColumn = 1, srcSpanEndLine = 3, srcSpanEndColumn = 7},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 3, srcSpanStartColumn = 8, srcSpanEndLine = 3, srcSpanEndColumn = 17},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 3, srcSpanStartColumn = 50, srcSpanEndLine = 3, srcSpanEndColumn = 52}]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 3, srcSpanStartColumn = 18, srcSpanEndLine = 3, srcSpanEndColumn = 49}, srcInfoPoints = []}) "Language.Haskell.Exts.Extension", importQualified = True, importSrc = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 3, srcSpanStartColumn = 53, srcSpanEndLine = 3, srcSpanEndColumn = 56}, srcInfoPoints = []}) "Ext"), importSpecs = Nothing}] [FunBind (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 1, srcSpanEndLine = 13, srcSpanEndColumn = 0}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 6, srcSpanStartColumn = 5, srcSpanEndLine = 6, srcSpanEndColumn = 10}]}) [Match (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 1, srcSpanEndLine = 13, srcSpanEndColumn = 0}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 6, srcSpanStartColumn = 5, srcSpanEndLine = 6, srcSpanEndColumn = 10}]}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 1, srcSpanEndLine = 5, srcSpanEndColumn = 6}, srcInfoPoints = []}) "parse") [PVar (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 7, srcSpanEndLine = 5, srcSpanEndColumn = 23}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 7, srcSpanEndLine = 5, srcSpanEndColumn = 23}, srcInfoPoints = []}) "originalFileName"),PVar (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 24, srcSpanEndLine = 5, srcSpanEndColumn = 29}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 24, srcSpanEndLine = 5, srcSpanEndColumn = 29}, srcInfoPoints = []}) "input")] (UnGuardedRhs (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 30, srcSpanEndLine = 5, srcSpanEndColumn = 74}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 30, srcSpanEndLine = 5, srcSpanEndColumn = 31}]}) (App (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 32, srcSpanEndLine = 5, srcSpanEndColumn = 74}, srcInfoPoints = []}) (App (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 32, srcSpanEndLine = 5, srcSpanEndColumn = 68}, srcInfoPoints = []}) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 32, srcSpanEndLine = 5, srcSpanEndColumn = 58}, srcInfoPoints = []}) (Qual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 32, srcSpanEndLine = 5, srcSpanEndColumn = 58}, srcInfoPoints = []}) (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 32, srcSpanEndLine = 5, srcSpanEndColumn = 58}, srcInfoPoints = []}) "Parser") (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 32, srcSpanEndLine = 5, srcSpanEndColumn = 58}, srcInfoPoints = []}) "parseModuleWithMode"))) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 59, srcSpanEndLine = 5, srcSpanEndColumn = 68}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 59, srcSpanEndLine = 5, srcSpanEndColumn = 68}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 59, srcSpanEndLine = 5, srcSpanEndColumn = 68}, srcInfoPoints = []}) "parseMode")))) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 69, srcSpanEndLine = 5, srcSpanEndColumn = 74}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 69, srcSpanEndLine = 5, srcSpanEndColumn = 74}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 5, srcSpanStartColumn = 69, srcSpanEndLine = 5, srcSpanEndColumn = 74}, srcInfoPoints = []}) "input"))))) (Just (BDecls (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 7, srcSpanEndLine = 13, srcSpanEndColumn = 0}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 7, srcSpanEndLine = 7, srcSpanEndColumn = 7},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 7, srcSpanEndLine = 8, srcSpanEndColumn = 7},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 13, srcSpanStartColumn = 1, srcSpanEndLine = 13, srcSpanEndColumn = 0}]}) [TypeSig (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 7, srcSpanEndLine = 7, srcSpanEndColumn = 36}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 17, srcSpanEndLine = 7, srcSpanEndColumn = 19}]}) [Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 7, srcSpanEndLine = 7, srcSpanEndColumn = 16}, srcInfoPoints = []}) "parseMode"] (TyCon (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 20, srcSpanEndLine = 7, srcSpanEndColumn = 36}, srcInfoPoints = []}) (Qual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 20, srcSpanEndLine = 7, srcSpanEndColumn = 36}, srcInfoPoints = []}) (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 20, srcSpanEndLine = 7, srcSpanEndColumn = 36}, srcInfoPoints = []}) "Parser") (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 7, srcSpanStartColumn = 20, srcSpanEndLine = 7, srcSpanEndColumn = 36}, srcInfoPoints = []}) "ParseMode"))),PatBind (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 7, srcSpanEndLine = 12, srcSpanEndColumn = 44}, srcInfoPoints = []}) (PVar (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 7, srcSpanEndLine = 8, srcSpanEndColumn = 16}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 7, srcSpanEndLine = 8, srcSpanEndColumn = 16}, srcInfoPoints = []}) "parseMode")) (UnGuardedRhs (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 17, srcSpanEndLine = 12, srcSpanEndColumn = 44}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 17, srcSpanEndLine = 8, srcSpanEndColumn = 18}]}) (RecUpdate (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 19, srcSpanEndLine = 12, srcSpanEndColumn = 44}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 43, srcSpanEndLine = 8, srcSpanEndColumn = 44},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 9, srcSpanStartColumn = 43, srcSpanEndLine = 9, srcSpanEndColumn = 44},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 12, srcSpanStartColumn = 43, srcSpanEndLine = 12, srcSpanEndColumn = 44}]}) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 19, srcSpanEndLine = 8, srcSpanEndColumn = 42}, srcInfoPoints = []}) (Qual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 19, srcSpanEndLine = 8, srcSpanEndColumn = 42}, srcInfoPoints = []}) (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 19, srcSpanEndLine = 8, srcSpanEndColumn = 42}, srcInfoPoints = []}) "Parser") (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 19, srcSpanEndLine = 8, srcSpanEndColumn = 42}, srcInfoPoints = []}) "defaultParseMode"))) [FieldUpdate (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 45, srcSpanEndLine = 8, srcSpanEndColumn = 84}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 66, srcSpanEndLine = 8, srcSpanEndColumn = 67}]}) (Qual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 45, srcSpanEndLine = 8, srcSpanEndColumn = 65}, srcInfoPoints = []}) (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 45, srcSpanEndLine = 8, srcSpanEndColumn = 65}, srcInfoPoints = []}) "Parser") (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 45, srcSpanEndLine = 8, srcSpanEndColumn = 65}, srcInfoPoints = []}) "parseFilename")) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 68, srcSpanEndLine = 8, srcSpanEndColumn = 84}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 68, srcSpanEndLine = 8, srcSpanEndColumn = 84}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 8, srcSpanStartColumn = 68, srcSpanEndLine = 8, srcSpanEndColumn = 84}, srcInfoPoints = []}) "originalFileName"))),FieldUpdate (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 9, srcSpanStartColumn = 45, srcSpanEndLine = 11, srcSpanEndColumn = 67}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 9, srcSpanStartColumn = 63, srcSpanEndLine = 9, srcSpanEndColumn = 64}]}) (Qual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 9, srcSpanStartColumn = 45, srcSpanEndLine = 9, srcSpanEndColumn = 62}, srcInfoPoints = []}) (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 9, srcSpanStartColumn = 45, srcSpanEndLine = 9, srcSpanEndColumn = 62}, srcInfoPoints = []}) "Parser") (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 9, srcSpanStartColumn = 45, srcSpanEndLine = 9, srcSpanEndColumn = 62}, srcInfoPoints = []}) "extensions")) (InfixApp (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 47, srcSpanEndLine = 11, srcSpanEndColumn = 67}, srcInfoPoints = []}) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 47, srcSpanEndLine = 10, srcSpanEndColumn = 62}, srcInfoPoints = []}) (Qual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 47, srcSpanEndLine = 10, srcSpanEndColumn = 62}, srcInfoPoints = []}) (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 47, srcSpanEndLine = 10, srcSpanEndColumn = 62}, srcInfoPoints = []}) "Ext") (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 47, srcSpanEndLine = 10, srcSpanEndColumn = 62}, srcInfoPoints = []}) "glasgowExts"))) (QVarOp (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 63, srcSpanEndLine = 10, srcSpanEndColumn = 65}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 63, srcSpanEndLine = 10, srcSpanEndColumn = 65}, srcInfoPoints = []}) (Symbol (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 10, srcSpanStartColumn = 63, srcSpanEndLine = 10, srcSpanEndColumn = 65}, srcInfoPoints = []}) "++"))) (List (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 11, srcSpanStartColumn = 47, srcSpanEndLine = 11, srcSpanEndColumn = 67}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 11, srcSpanStartColumn = 47, srcSpanEndLine = 11, srcSpanEndColumn = 48},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 11, srcSpanStartColumn = 66, srcSpanEndLine = 11, srcSpanEndColumn = 67}]}) [Con (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 11, srcSpanStartColumn = 48, srcSpanEndLine = 11, srcSpanEndColumn = 66}, srcInfoPoints = []}) (Qual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 11, srcSpanStartColumn = 48, srcSpanEndLine = 11, srcSpanEndColumn = 66}, srcInfoPoints = []}) (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 11, srcSpanStartColumn = 48, srcSpanEndLine = 11, srcSpanEndColumn = 66}, srcInfoPoints = []}) "Ext") (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 11, srcSpanStartColumn = 48, srcSpanEndLine = 11, srcSpanEndColumn = 66}, srcInfoPoints = []}) "ExplicitForall"))]))])) Nothing]))],PatBind (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 13, srcSpanStartColumn = 1, srcSpanEndLine = 17, srcSpanEndColumn = 0}, srcInfoPoints = []}) (PVar (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 13, srcSpanStartColumn = 1, srcSpanEndLine = 13, srcSpanEndColumn = 5}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 13, srcSpanStartColumn = 1, srcSpanEndLine = 13, srcSpanEndColumn = 5}, srcInfoPoints = []}) "main")) (UnGuardedRhs (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 13, srcSpanStartColumn = 6, srcSpanEndLine = 17, srcSpanEndColumn = 0}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 13, srcSpanStartColumn = 6, srcSpanEndLine = 13, srcSpanEndColumn = 7}]}) (Do (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 5, srcSpanEndLine = 17, srcSpanEndColumn = 0}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 5, srcSpanEndLine = 14, srcSpanEndColumn = 7},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 8, srcSpanEndLine = 14, srcSpanEndColumn = 8},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 8, srcSpanEndLine = 15, srcSpanEndColumn = 8},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 8},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 17, srcSpanStartColumn = 1, srcSpanEndLine = 17, srcSpanEndColumn = 0}]}) [Generator (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 8, srcSpanEndLine = 14, srcSpanEndColumn = 30}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 10, srcSpanEndLine = 14, srcSpanEndColumn = 12}]}) (PVar (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 8, srcSpanEndLine = 14, srcSpanEndColumn = 9}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 8, srcSpanEndLine = 14, srcSpanEndColumn = 9}, srcInfoPoints = []}) "s")) (App (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 13, srcSpanEndLine = 14, srcSpanEndColumn = 30}, srcInfoPoints = []}) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 13, srcSpanEndLine = 14, srcSpanEndColumn = 21}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 13, srcSpanEndLine = 14, srcSpanEndColumn = 21}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 13, srcSpanEndLine = 14, srcSpanEndColumn = 21}, srcInfoPoints = []}) "readFile"))) (Lit (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 22, srcSpanEndLine = 14, srcSpanEndColumn = 30}, srcInfoPoints = []}) (String (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 14, srcSpanStartColumn = 22, srcSpanEndLine = 14, srcSpanEndColumn = 30}, srcInfoPoints = []}) "Bug.hs" "Bug.hs"))),LetStmt (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 0}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 8, srcSpanEndLine = 15, srcSpanEndColumn = 11}]}) (BDecls (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 12, srcSpanEndLine = 16, srcSpanEndColumn = 0}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 12, srcSpanEndLine = 15, srcSpanEndColumn = 12},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 0}]}) [PatBind (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 12, srcSpanEndLine = 15, srcSpanEndColumn = 32}, srcInfoPoints = []}) (PVar (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 12, srcSpanEndLine = 15, srcSpanEndColumn = 13}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 12, srcSpanEndLine = 15, srcSpanEndColumn = 13}, srcInfoPoints = []}) "x")) (UnGuardedRhs (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 14, srcSpanEndLine = 15, srcSpanEndColumn = 32}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 14, srcSpanEndLine = 15, srcSpanEndColumn = 15}]}) (App (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 16, srcSpanEndLine = 15, srcSpanEndColumn = 32}, srcInfoPoints = []}) (App (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 16, srcSpanEndLine = 15, srcSpanEndColumn = 30}, srcInfoPoints = []}) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 16, srcSpanEndLine = 15, srcSpanEndColumn = 21}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 16, srcSpanEndLine = 15, srcSpanEndColumn = 21}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 16, srcSpanEndLine = 15, srcSpanEndColumn = 21}, srcInfoPoints = []}) "parse"))) (Lit (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 22, srcSpanEndLine = 15, srcSpanEndColumn = 30}, srcInfoPoints = []}) (String (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 22, srcSpanEndLine = 15, srcSpanEndColumn = 30}, srcInfoPoints = []}) "Bug.hs" "Bug.hs"))) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 31, srcSpanEndLine = 15, srcSpanEndColumn = 32}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 31, srcSpanEndLine = 15, srcSpanEndColumn = 32}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 15, srcSpanStartColumn = 31, srcSpanEndLine = 15, srcSpanEndColumn = 32}, srcInfoPoints = []}) "s"))))) Nothing]),Qualifier (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 25}, srcInfoPoints = []}) (App (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 25}, srcInfoPoints = []}) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 16}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 16}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 8, srcSpanEndLine = 16, srcSpanEndColumn = 16}, srcInfoPoints = []}) "putStrLn"))) (Paren (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 17, srcSpanEndLine = 16, srcSpanEndColumn = 25}, srcInfoPoints = [SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 17, srcSpanEndLine = 16, srcSpanEndColumn = 18},SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 24, srcSpanEndLine = 16, srcSpanEndColumn = 25}]}) (App (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 18, srcSpanEndLine = 16, srcSpanEndColumn = 24}, srcInfoPoints = []}) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 18, srcSpanEndLine = 16, srcSpanEndColumn = 22}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 18, srcSpanEndLine = 16, srcSpanEndColumn = 22}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 18, srcSpanEndLine = 16, srcSpanEndColumn = 22}, srcInfoPoints = []}) "show"))) (Var (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 23, srcSpanEndLine = 16, srcSpanEndColumn = 24}, srcInfoPoints = []}) (UnQual (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 23, srcSpanEndLine = 16, srcSpanEndColumn = 24}, srcInfoPoints = []}) (Ident (SrcSpanInfo {srcInfoSpan = SrcSpan {srcSpanFilename = "tests/examples/HaskellParser.hs", srcSpanStartLine = 16, srcSpanStartColumn = 23, srcSpanEndLine = 16, srcSpanEndColumn = 24}, srcInfoPoints = []}) "x"))))))])) Nothing],[])
